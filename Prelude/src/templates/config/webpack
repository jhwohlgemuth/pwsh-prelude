/* eslint-env node */
const {{{= if($WithCesium) { 'join, ' } }}resolve} = require('path');{{= if($WithCesium) { '`nconst {DefinePlugin} = require(''webpack'');`nconst CopyWebpackPlugin = require(''copy-webpack-plugin'');' } }}
const DashboardPlugin = require('webpack-dashboard/plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const {SubresourceIntegrityPlugin} = require('webpack-subresource-integrity');
const TerserPlugin = require('terser-webpack-plugin');
{{= if($WithCesium) { 'const source = ''node_modules/cesium/Build/Cesium'';`n' } }}
module.exports = (_, argv) => ({
    mode: argv.mode === 'production' ? 'production' : 'development',
    entry: [
        {{= if($UseReact) { '...(argv.mode === ''production'' ? [] : [''react-hot-loader/patch'']),`n        ' } }}'./{{ SourceDirectory }}/main.js{{= if($UseReact) { 'x' } }}'
    ],
    devtool: (argv.mode === 'production') ? void 0 : 'eval-source-map',
    output: {
        path: resolve('./{{ ProductionDirectory }}'),
        filename: 'bundle.min.js',
        crossOriginLoading: 'anonymous'
    },
    context: __dirname,
    devServer: {
        allowedHosts: 'all',
        compress: true,
        host: 'localhost',
        port: 4669,
        static: {
            directory: resolve('./{{ ProductionDirectory }}')
        }
    },
    module: {
        rules: [
            {
                test: /.jsx?$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
                options: {
                    presets: [
                        '@babel/env'
                    ]
                }
            },
            {
                test: /.css$/,
                resourceQuery: /thirdparty/,
                use: [
                    'style-loader',
                    'css-loader'
                ]
            },
            {
                test: /.css$/,
                exclude: /node_modules/,
                use: [
                    'style-loader',
                    {
                        loader: 'css-loader',
                        options: {
                            importLoaders: 1
                        }
                    },
                    'postcss-loader'
                ]
            },
            {
                test: /\\.(woff(2)?|ttf|eot|svg)(\\?v=\\d+\\.\\d+\\.\\d+)?$/,
                use: [
                    'file-loader'
                ]
            },
            {
                test: /.(png|gif|jpg|jpeg|svg|xml|json)$/,
                use: [
                    'url-loader'
                ]
            }
        ]
    },
    optimization: {
        minimize: argv.mode === 'production',
        minimizer: [new TerserPlugin()]
    },
    plugins: [
        new DashboardPlugin(),
        new HtmlWebpackPlugin({
            title: ``Web App [${argv.mode === 'production' ? 'production' : 'development'}]``,
            template: '{{ AssetsDirectory }}/index.html'
        }),
        new SubresourceIntegrityPlugin(){{= if($WithCesium) { $CesiumConfig } }}
    ],
    resolve: {
        mainFields: ['module', 'main'],
        modules: [resolve(__dirname, './{{ SourceDirectory }}'), 'node_modules'],
        extensions: ['.js'{{= if($UseReact) { ', ''.jsx''' } }}],
        alias: {{{= if($UseReact) { '''react-dom'': ''@hot-loader/react-dom''' } }}}
    }
}); 